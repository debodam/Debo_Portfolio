import Box from "@mui/material/Box";
import { styled } from "@mui/material/styles";
import Tab from "@mui/material/Tab";
import Tabs from "@mui/material/Tabs";
import Typography from "@mui/material/Typography";
import PropTypes from "prop-types";
import React, { useEffect, useState } from "react";

const TabPanelStyled = styled("div")({
  padding: 24,
});

const TabsStyled = styled(Tabs)(({ theme }) => ({
  borderRight: `1px solid ${theme.palette.divider}`,
  "& .MuiTabs-scrollable": {
    overflowX: "auto",
  },
  "& .MuiTabs-scrollButtons": {
    display: "none",
  },
  "&::-webkit-scrollbar": {
    width: "8px",
    color: "#36c2ce",
  },
  "&::-webkit-scrollbar-thumb": {
    color: "#36c2ce",
    borderRadius: "8px",
  },
  "&::-webkit-scrollbar-track": {
    color: "#36c2ce",
  },
}));

function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <TabPanelStyled
      role="tabpanel"
      hidden={value !== index}
      id={`tabpanel-${index}`}
      aria-labelledby={`tab-${index}`}
      {...other}>
      {value === index && (
        <Box p={3}>
          <Typography>{children}</Typography>
        </Box>
      )}
    </TabPanelStyled>
  );
}

TabPanel.propTypes = {
  children: PropTypes.node,
  index: PropTypes.any.isRequired,
  value: PropTypes.any.isRequired,
};

function a11yProps(index) {
  return {
    id: `tab-${index}`,
    "aria-controls": `tabpanel-${index}`,
  };
}

const JobList = () => {
  const [value, setValue] = useState(0);
  const [isHorizontal, setIsHorizontal] = useState(window.innerWidth < 600);

  useEffect(() => {
    const handleResize = () => {
      setIsHorizontal(window.innerWidth < 600);
    };
    window.addEventListener("resize", handleResize);
    // Cleanup on unmount
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  const experienceItems = {
    "UCalgary Students' Union": {
      jobTitle: "Faculty Representative: Schulich School of Engineering @",
      duration: "MAR 2024 - PRESENT",
      desc: [
        "Elected in the 2024 Students’ Union election with a total of 489 votes to advocate for student’s interests and enhance post-secondary engineering education by collaborating directly with the faculty dean and other student representatives.",
        "Generated bylaws and policies regarding membership, elections, governance structure, meetings, membership fees, the acquisition, management and disposition of property, appointments to committees.",
      ],
    },
    "AC Robotics": {
      jobTitle: "Project Manager @",
      duration: "JULY 2023 - APR 2024",
      desc: [
        "Spearheaded the development of an innovative, cost-effective myoelectric prosthesis for the arm, integrating 3D printed materials, EMG sensors, and ESP32 processors.",
        "Developed a dynamic MERN app with a user-friendly React front-end, efficient Node.js and Express server-side logic, and robust MongoDB database, featuring intuitive controls and customization.",
      ],
    },
    "Schulich Ignite": {
      jobTitle: "Programming Mentor @",
      duration: "JAN 2023 - APR 2023",
      desc: [
        "Proactively mentored aspiring students, imparting foundational knowledge of frontend web development, cultivating expertise in key technologies including JavaScript, HTML/CSS, and Node.js.",
      ],
    },
    "Engineering Students' Society": {
      jobTitle: "First Year Representative @",
      duration: "SEPT 2022 - APR 2023",
      desc: [
        "As a representative for a cohort of 100+ students at the University of Calgary, demonstrated leadership in community engagement, volunteered for campus events, and contributed significantly to improving the first-year engineering curriculum through consistent engagement in meetings with academic coordinators.",
      ],
    },
  };

  const handleChange = (event, newValue) => {
    setValue(newValue);
  };

  return (
    <div
      style={{
        display: "flex",
        height: 300,
        flexDirection: isHorizontal ? "column" : "row",
      }}>
      <TabsStyled
        orientation={isHorizontal ? "horizontal" : "vertical"}
        variant={isHorizontal ? "fullWidth" : "scrollable"}
        value={value}
        onChange={handleChange}>
        {Object.keys(experienceItems).map((key, i) => (
          <Tab
            label={isHorizontal ? `0${i}.` : key}
            {...a11yProps(i)}
            key={key}
          />
        ))}
      </TabsStyled>
      {Object.keys(experienceItems).map((key, i) => (
        <TabPanel value={value} index={i} key={key}>
          <span className="joblist-job-title">
            {experienceItems[key]["jobTitle"] + " "}
          </span>
          <span className="joblist-job-company">{key}</span>
          <div className="joblist-duration">
            {experienceItems[key]["duration"]}
          </div>
          <ul className="job-description">
            {experienceItems[key]["desc"].map((descItem, i) => (
              <li key={i}>{descItem}</li>
            ))}
          </ul>
        </TabPanel>
      ))}
    </div>
  );
};

export default JobList;
